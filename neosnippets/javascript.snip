snippet greasemonkey
alias monkey
abbr Greasemonkey ボイラープレート
options head
	// [個人的GreaseMonkey頻用パタン #JavaScript - Qiita]
	// https://qiita.com/cp3/items/03a658a32004211ce26c
	//---  ヘルパー  ---------------------------------------------------------------
	// second 秒待機する
	const sleep = second => new Promise(resolve => setTimeout(resolve, second * 1000));

	function log(str) {
		console.log(str);
	}

	//---  やりたい処理の関数・変数定義  -------------------------------------------
	// ここに直に書くと、DOM が読み込まれる前に実行されるので、
	// addEventListener、関数、変数定義以外は記述しないこと。
	// なぜなら作ってきた Greasemonkey スクリプトの大抵は特定ページの DOM に対
	// して処理を行っているから。

	let v1 = 0;

	const f1 = async function () {
		/*やりたいことの実装はここに書く*/
	}

	const f2 = async function () {
		/*やりたいことの実装はここに書く*/
	}

	//---  処理のエントリーポイント  -----------------------------------------------
	async function execFunction() {
		// やりたいことの流れはここに記述する。
		await f1(); // await キーワードついているものは上から順に実行される（同期処理）。
		await f2();

		// タイマー処理の登録もここで行う。
		//指定時間後に実行する
		var waitTime = 1000 * 60 * 3; // 1000 (millisec) * 60 (sec) * 3 = 3 分
		setTimeout(f2, waitTime); // 3 分後に実行する

		//指定時間間隔で実行する
		var intervalTime = 1000 * 60 * 3; // 1000 (millisec) * 60 (sec) * 3 = 3 分
		setInterval(f1, intervalTime); // 3 分間隔で f1 を実行する
	}

	// メイン処理の実行タイミングが window のロード時となるように登録する。
	window.addEventListener('load', async function () { await execFunction() });

snippet :f
options head
  ${1:#:method_name}: function(${2:#:attribute}) {
    ${0:TARGET}
  }

snippet function
abbr    func
options word
  function ${1:#:function_name}(${2:#:argument}) {
    ${0:TARGET}
  }

snippet function2
abbr    func2
options head
  function ${1:function_name}(${2:argument}) {
    ${0:TARGET}
  }

snippet proto
options head
  ${1:#:class_name}.prototype.${2:#:method_name} = function(${3:#:first_argument}) {
    ${0:TARGET}
  };


snippet f
options word
  function(${1}) { ${0:TARGET} };

snippet if
options head
  if (${1:true}) {
    ${0:TARGET}
  }

snippet if-else
abbr ife
options head
  if (${1:#:condition}) {
    ${2:TARGET}
  } else {
    ${3}
  }

snippet for
options head
  for (var ${1:i} = 0; $1 < ${2:#:Things}.length; ++$1) {
    ${0:TARGET}
  }

snippet forin
options head
  for (var ${1:i} in ${2:#:Things}) {
    ${0:TARGET}
  }

snippet while
options head
  while (${1:true}) {
    ${0:TARGET}
  }

snippet switch
options head
  switch (${1:#:var}) {
    case ${2:#:val}:
      ${0:TARGET}
      break;
  }

snippet try
options head
  try {
    ${1:TARGET}
  } catch (${2:e}) {
    ${3}
  }

snippet try_finally
options head
  try {
    ${1:TARGET}
  } catch (${2:e}) {
    ${3}
  } finally {
    ${4}
  }


snippet key-value
abbr :,
options word
  ${1:#:value_name}: ${0:#:value},

#snippet key
#options word
#  ${1:#:key}: "${2:#:value}"}${3:, }

snippet setTimeout-function
options head
  setTimeout(function() { ${0} }, ${1:10});

snippet debugger
alias db
options head
  debugger;

snippet console-log
alias cl
options head
  console.log(${0:TARGET});

snippet console-trace
alias ct
options head
  console.trace();

snippet console-error
alias ce
options head
  console.error(${0:TARGET});

snippet console-warn
alias cw
options head
  console.warn(${0:TARGET});

snippet console-info
alias ci
options head
  console.info(${0:TARGET});

snippet iife
options head
  (function(${1}) {
    'use strict';
    ${0:TARGET}
  })(${2});

snippet js
options head
  JSON.stringify(${1:TARGET}, ${2:null}, ${3:2});

snippet jsc
options head
  console.log(JSON.stringify(${1:TARGET}, ${2:null}, ${3:2}));

snippet     class
abbr        class {...}
options     head
  class ${1:#:NAME} {
    constructor(${2:#:ARGS}) {
      ${0:TARGET}
    }
  }

snippet     class-extends
abbr        class extends {...}
options     head
  class ${1:#:NAME} extends ${2:#:SuperClass} {
    constructor(${3:#:ARGS}) {
      ${0:TARGET}
    }
  }

snippet     static
options     head
  static ${1:#:NAME}(${2:#:ARGS}) {
    ${0:TARGET}
  }

snippet     set
options     head
  set ${1:#:NAME}(${2:#:ARGS}) {
    ${0:TARGET}
  }

snippet     get
options     head
  get ${1:#:NAME}() {
    ${0:TARGET}
  }

snippet     import
abbr        import { member, ... } from "module-name";
options     head
  import { ${1:MEMBERS} } from "${0:TARGET}";

snippet     import-default
abbr        import defaultMember from "module-name";
options     head
  import ${1:defaultMember} from "${0:TARGET}";

snippet     import-all
abbr        import * as NAME from "...";
options     head
  import * as ${1:NAME} from "${0:TARGET}";

snippet     import-default-member
abbr        import defaultMember, { member, ... } from "module-name";
options     head
  import ${1:defaultMember}, { ${2:MEMBERS} } from "${0:TARGET}";
